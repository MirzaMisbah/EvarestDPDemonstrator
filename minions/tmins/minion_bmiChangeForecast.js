  var bmiChangeForecast = function (divID, _data) {
        //'use strict';
       	if(typeof forHilti !== 'undefined')
		_forHilti = forHilti;
	    else
		_forHilti = false;

        // data preprocessing1
        var x = {};
        /**/
        try{
        x['age'] = _data['age'];
        x['bmi'] = _data['bmi'];
        x['height'] = _data['height'];
        x['therapy'] = _data['therapy'];
        x['weight'] = _data['weight'];

        var hr_run = [];
        var hr_cool = [];

        // split HR sequence into running and cooling down
        for(var i =0; i<_data['values'].length; i++){
            var v = _data['values'][i];
            if(v['valueString'] == 'run'){
                hr_run.push([0.0, v['value']]);
            }else{
                hr_cool.push([0.0, v['value']]);
            }
        }

        x['hr_cool'] = hr_cool;
        x['hr_run'] = hr_run;

        function b64toURL(b64Data, contentType, sliceSize) {
          contentType = contentType || '';
          sliceSize = sliceSize || 512;

          var byteCharacters = atob(b64Data);
          var byteArrays = [];

          for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {
            var slice = byteCharacters.slice(offset, offset + sliceSize);

            var byteNumbers = new Array(slice.length);
            for (var i = 0; i < slice.length; i++) {
              byteNumbers[i] = slice.charCodeAt(i);
            }

            var byteArray = new Uint8Array(byteNumbers);

            byteArrays.push(byteArray);
          }

          var blob = new Blob(byteArrays, {type: contentType});
          return URL.createObjectURL(blob);
        }

        $.ajaxSetup({'cache':true});


         var model_url = b64toURL('CiQxYWNmYTc3NC03YWY4LTRjYWEtODgyOS1iNDQ1NTFkOGE2OTISBW1vZGVsGgUyLjAuNyIKdGVuc29yZmxvdyqWB3siY2xhc3NfbmFtZSI6ICJNb2RlbCIsICJjb25maWciOiB7Im91dHB1dF9sYXllcnMiOiBbWyJkZW5zZV8xMSIsIDAsIDBdXSwgImlucHV0X2xheWVycyI6IFtbImlucHV0XzExIiwgMCwgMF1dLCAibmFtZSI6ICJtb2RlbF8xMSIsICJsYXllcnMiOiBbeyJjbGFzc19uYW1lIjogIklucHV0TGF5ZXIiLCAiY29uZmlnIjogeyJiYXRjaF9pbnB1dF9zaGFwZSI6IFtudWxsLCAxNl0sICJkdHlwZSI6ICJmbG9hdDMyIiwgInNwYXJzZSI6IGZhbHNlLCAibmFtZSI6ICJpbnB1dF8xMSJ9LCAiaW5ib3VuZF9ub2RlcyI6IFtdLCAibmFtZSI6ICJpbnB1dF8xMSJ9LCB7ImNsYXNzX25hbWUiOiAiRGVuc2UiLCAiY29uZmlnIjogeyJhY3Rpdml0eV9yZWd1bGFyaXplciI6IG51bGwsICJiaWFzX2NvbnN0cmFpbnQiOiBudWxsLCAidW5pdHMiOiAxLCAiYWN0aXZhdGlvbiI6ICJsaW5lYXIiLCAia2VybmVsX2luaXRpYWxpemVyIjogeyJjbGFzc19uYW1lIjogIlZhcmlhbmNlU2NhbGluZyIsICJjb25maWciOiB7Im1vZGUiOiAiZmFuX2F2ZyIsICJkaXN0cmlidXRpb24iOiAidW5pZm9ybSIsICJzY2FsZSI6IDEuMCwgInNlZWQiOiBudWxsfX0sICJuYW1lIjogImRlbnNlXzExIiwgImJpYXNfcmVndWxhcml6ZXIiOiBudWxsLCAidHJhaW5hYmxlIjogdHJ1ZSwgImtlcm5lbF9jb25zdHJhaW50IjogbnVsbCwgImJpYXNfaW5pdGlhbGl6ZXIiOiB7ImNsYXNzX25hbWUiOiAiWmVyb3MiLCAiY29uZmlnIjoge319LCAidXNlX2JpYXMiOiB0cnVlLCAia2VybmVsX3JlZ3VsYXJpemVyIjogeyJjbGFzc19uYW1lIjogIkwxTDIiLCAiY29uZmlnIjogeyJsMSI6IDAuMCwgImwyIjogMC4xMDAwMDAwMDE0OTAxMTYxMn19fSwgImluYm91bmRfbm9kZXMiOiBbW1siaW5wdXRfMTEiLCAwLCAwLCB7fV1dXSwgIm5hbWUiOiAiZGVuc2VfMTEifV19fTJsCghkZW5zZV8xMRIRZGVuc2VfMTEva2VybmVsOjAaAhABIgdmbG9hdDMyKkBtUFM9g7/oPCyYvj6W1qQ9eycePvNkCL4fOQq+2kClPvGuej6yO+k+BrQVPMiGxr3aNxe+vV6+vtsJqL2JMzA/Mi0KCGRlbnNlXzExEg9kZW5zZV8xMS9iaWFzOjAaAQEiB2Zsb2F0MzIqBNm/Tz4=');

        var preprocessor_url = b64toURL('');

        var kerasjs_url = "https://unpkg.com/keras-js";

        $.getScript(kerasjs_url, function( data, textStatus, jqxhr ) {
          $.getScript(preprocessor_url, function( data, textStatus, jqxhr ) {
                const model = new KerasJS.Model({
                  filepath: model_url,
                  gpu: true
                });
                function predictBMIOnJS(js, callback){
                	try{

		                  var x = hrfeatures.convert_to_features([js]);

		                  x = x[0];
		
		                  model.ready().then(() => {


		                    // input data object keyed by names of the input layers
		                    // or `input` for Sequential models
		                    // values are the flattened Float32Array data
		                    // (input tensor shapes are specified in the model config)
		                    const inputData = {
		                      input_11: new Float32Array(x)
		                    };
		
		                    // make predictions

		                    return model.predict(inputData)
		                  }).then(outputData => {

			                    var score = outputData['dense_11'];
			                    var estimate = score > 0.0 ? (_forHilti? "Health-": "+1 (BMI Growth)") :  (_forHilti? "Health+": "-1 (BMI Decline)") ;
                                var positive = score > 0.0 ? false: true;
			                    callback(estimate, positive);
		                  }).catch(err => {
		                    // handle error
		                  });
	                  }catch(error){
	                  	console.warn(error);
	                  	console.log("Given data does not comply with this subMinion");
	                  	 var div = document.getElementById(divID);
	                  	div.innerHTML = '<p style="width:100vw;line-height: 14px;height:75px;margin: 0px;display: table-cell;vertical-align: middle; padding: 10px;border: 10px solid;text-align:center"/>'
                     + "Can't work with selected data, only with Nov 1, 2017" + "</div>";
	                  }
                }


                predictBMIOnJS(x, function(result, positive){

                    var div = document.getElementById(divID);
                    var color = positive? 'green' : 'red';
                    var txtLbl = _forHilti? "Predictive Maintenance on Machine: " : "Predicted change: ";
                    div.innerHTML = '<p style="width:100vw;line-height: 14px;height:75px;margin: 0px;display: table-cell;vertical-align: middle; padding: 10px;border: 10px solid;text-align:center"/>'
                     + txtLbl + "<b style='color:" + color +"'>" + result + "</b>" + "</div>";


                });
            });
        });

  }
  catch(err){
                  	 var div = document.getElementById(divID);
	                  	div.innerHTML = '<p style="width:100vw;line-height: 14px;height:75px;margin: 0px;display: table-cell;vertical-align: middle; padding: 10px;border: 10px solid;text-align:center"/>'
                     + "Can't work with selected data, only with Nov 1, 2017" + "</div>";
  }

};
